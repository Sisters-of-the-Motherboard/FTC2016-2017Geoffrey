package org.firstinspires.ftc.teamcode;


import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import  com.qualcomm.robotcore.hardware.Servo;



@Autonomous(name="WeHopeThisWorksRED", group="Linear Opmode")
public class WeHopeThisWorksRED extends LinearOpMode {

    private ElapsedTime ForwardTimer =  new ElapsedTime();
    private ElapsedTime BackwardTimer = new ElapsedTime();

    // 1440 Ticks/Revolution

    private ElapsedTime runtime = new ElapsedTime();

    Servo RackPinion;
    ColorSensor Rainbow;

    DcMotor Ten = null;
    DcMotor Eight = null;
    DcMotor Four = null;
    DcMotor Two = null;
    DcMotor Sweeper = null;
    Servo ArmRelease;
    Servo Clamp;
    Servo BallRelease;

    DcMotor ColorBall = null;



    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        Ten = hardwareMap.dcMotor.get("Ten");
        Eight = hardwareMap.dcMotor.get("Eight");
        Four = hardwareMap.dcMotor.get("Four");
        Two = hardwareMap.dcMotor.get("Two");
        Sweeper = hardwareMap.dcMotor.get("Sweeper");
        ArmRelease = hardwareMap.servo.get("ArmRelease");
        Clamp = hardwareMap.servo.get("Clamp");
        BallRelease = hardwareMap.servo.get("BallRelease");

        Sweeper.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        Two.setDirection(DcMotorSimple.Direction.REVERSE);
        Four.setDirection(DcMotorSimple.Direction.REVERSE);

        RackPinion = hardwareMap.servo.get("RackPinion");

        // hsvValues is an array that will hold the hue, saturation, and value information.
        float hsvValues[] = {0F, 0F, 0F};

        // values is a reference to the hsvValues array.
        final float values[] = hsvValues;

        // get a reference to the RelativeLayout so we can change the background
        // color of the Robot Controller app to match the hue detected by the RGB sensor.
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(com.qualcomm.ftcrobotcontroller.R.id.RelativeLayout);

        // bPrevState and bCurrState represent the previous and current state of the button.
        boolean bPrevState = false;
        boolean bCurrState = false;
        boolean LEDState = true;


        // bLedOn represents the state of the LED.
        boolean bLedOn = true;

        // get a reference to our ColorSensor object.
        Rainbow = hardwareMap.colorSensor.get("Rainbow");

        // Set the LED in the beginning
        Rainbow.enableLed(bLedOn);

        ArmRelease.setPosition(0.8);
        Clamp.setPosition(0.0);
        BallRelease.setPosition(0.0);


        waitForStart();
        runtime.reset();

        while (opModeIsActive()) {
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.update();
            Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

            Sweeper.setTargetPosition(7000); //This is the correct value
            Sweeper.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            Sweeper.setPower(0.8);

            while (Sweeper.isBusy()) {
                Two.setPower(0.65);
                Eight.setPower(0.8);
            }

            Two.setPower(0.0);
            Eight.setPower(0.0);
            Sweeper.setPower(0.0);

            Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            Sweeper.setTargetPosition(0);
            Sweeper.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            Color.RGBToHSV(Rainbow.red() * 8, Rainbow.green() * 8, Rainbow.blue() * 8, hsvValues);

            telemetry.addData("LED", bLedOn ? "On" : "Off");
            telemetry.addData("Clear", Rainbow.alpha());
            telemetry.addData("Red  ", Rainbow.red());
            telemetry.addData("Green", Rainbow.green());
            telemetry.addData("Blue ", Rainbow.blue());
            telemetry.addData("Hue", hsvValues[0]);


            telemetry.update();

            if (Rainbow.red() >= 2) {
                ForwardTimer.reset();
                while (ForwardTimer.milliseconds() < 300) {
                    Two.setPower(0.4);
                    Four.setPower(-0.2);
                    Eight.setPower(0.2);
                    Ten.setPower(-0.2);
                }

                Two.setPower(0.0);
                Four.setPower(0.0);
                Eight.setPower(0.0);
                Ten.setPower(0.0);

                BackwardTimer.reset();
                while (BackwardTimer.milliseconds() < 1000) {
                    Two.setPower(-0.6);
                    Four.setPower(0.4);
                    Eight.setPower(-0.4);
                    Ten.setPower(0.4);
                }

                Two.setPower(0.0);
                Four.setPower(0.0);
                Eight.setPower(0.0);
                Ten.setPower(0.0);

            }

            else if (Rainbow.blue() >= 2) {

                RackPinion.setPosition(0.0);
                sleep(3500);
                RackPinion.setPosition(0.5);

                ForwardTimer.reset();
                while (ForwardTimer.milliseconds() < 300) {
                    Two.setPower(0.4);
                    Four.setPower(-0.2);
                    Eight.setPower(0.2);
                    Ten.setPower(-0.2);
                }

                Two.setPower(0.0);
                Four.setPower(0.0);
                Eight.setPower(0.0);
                Ten.setPower(0.0);

                BackwardTimer.reset();
                while (BackwardTimer.milliseconds() < 1000) {
                    Two.setPower(-0.6);
                    Four.setPower(0.4);
                    Eight.setPower(-0.4);
                    Ten.setPower(0.4);
                }

                Two.setPower(0.0);
                Four.setPower(0.0);
                Eight.setPower(0.0);
                Ten.setPower(0.0);

            }

            Two.setPower(0.0);
            Four.setPower(0.0);
            Eight.setPower(0.0);
            Ten.setPower(0.0);

            }

       /* Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        Sweeper.setTargetPosition(1880); //This is the correct value
        Sweeper.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Sweeper.setPower(0.8);

        while (Sweeper.isBusy()) {
            Two.setPower(0.8);
            Eight.setPower(0.8);
            Ten.setPower(0.8);
            Four.setPower(0.8);
        }*/

        Two.setPower(0.0);
        Eight.setPower(0.0);
        Ten.setPower(0.0);
        Four.setPower(0.0);
        Sweeper.setPower(0.0);

        Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Sweeper.setTargetPosition(0);
        Sweeper.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        Sweeper.setTargetPosition(1440); //This is the correct value
        Sweeper.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Sweeper.setPower(0.8);

        while (Sweeper.isBusy()) {
            ColorBall.setPower(-1);
        }
        ColorBall.setPower(0);
        Sweeper.setPower(0);

        Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Sweeper.setTargetPosition(0);
        Sweeper.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

      /*  BallRelease.setPosition(1);

        Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        Sweeper.setTargetPosition(1440); //This is the correct value
        Sweeper.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Sweeper.setPower(0.8);


        while (Sweeper.isBusy()) {
            ColorBall.setPower(-1);
        }
        ColorBall.setPower(0);
        Sweeper.setPower(0);

        Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Sweeper.setTargetPosition(0);
        Sweeper.setMode(DcMotor.RunMode.RUN_USING_ENCODER); */

        Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        Sweeper.setTargetPosition(4500); //This is the correct value
        Sweeper.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Sweeper.setPower(0.8);

        while (Sweeper.isBusy()) {
            Two.setPower(-0.6);
            Eight.setPower(0.4);
            Ten.setPower(-0.4);
            Four.setPower(0.4);
        }

        Two.setPower(0.0);
        Eight.setPower(0.0);
        Ten.setPower(0.0);
        Four.setPower(0.0);
        Sweeper.setPower(0.0);

        Sweeper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Sweeper.setTargetPosition(0);
        Sweeper.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        while (runtime.time() < 30 || !isStopRequested()) {
            Two.setPower(0.0);
            Four.setPower(0.0);
            Eight.setPower(0.0);
            Ten.setPower(0.0);
            Sweeper.setPower(0.0);
        }

    }

    }


