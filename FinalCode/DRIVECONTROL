package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;



@TeleOp(name = "DRIVECONTROL", group = "OpModes")
public class DRIVECONTROL extends OpMode {

    DcMotor Two;
    DcMotor Ten;
    DcMotor Four;
    DcMotor Eight;

    DcMotor Lift;
    DcMotor ColorBall;
    DcMotor Sweeper;

    Servo RackPinion;
    Servo ArmRelease;
    Servo BallRelease;
    Servo Clamp;

    public DRIVECONTROL() {

    }

    @Override
    public void init() {

        Two = hardwareMap.dcMotor.get("Two");
        Ten = hardwareMap.dcMotor.get("Ten");
        Eight = hardwareMap.dcMotor.get("Eight");
        Four = hardwareMap.dcMotor.get("Four");

        Lift = hardwareMap.dcMotor.get("Lift");
        ColorBall = hardwareMap.dcMotor.get("ColorBall");
        Sweeper = hardwareMap.dcMotor.get("Sweeper");

        RackPinion = hardwareMap.servo.get("RackPinion");
        ArmRelease = hardwareMap.servo.get("ArmRelease");
        BallRelease = hardwareMap.servo.get("BallRelease");
        Clamp = hardwareMap.servo.get("Clamp");
        
    }

    @Override
    public void loop() {
        
        double ClampStay = 0.0;
        double deadZoneStart = -0.2;

        double deadZoneEnd = 0.2;
        float gamepad1LeftY = -gamepad1.left_stick_y;
        float gamepad1LeftX;

        if (gamepad1.left_stick_x < deadZoneEnd && gamepad1.left_stick_x > deadZoneStart) {
            gamepad1LeftX = 0; //WITHIN DEAD ZONE
        }
        else{
            gamepad1LeftX = gamepad1.left_stick_x;
        }

        float gamepad1RightX = gamepad1.right_stick_x;

        float FrontLeft = -gamepad1LeftY - gamepad1LeftX - gamepad1RightX;
        float FrontRight = gamepad1LeftY - gamepad1LeftX - gamepad1RightX;
        float BackRight = gamepad1LeftY + gamepad1LeftX - gamepad1RightX;
        float BackLeft = -gamepad1LeftY + gamepad1LeftX - gamepad1RightX;

        FrontRight = Range.clip(FrontRight, -1, 1);
        FrontLeft = Range.clip(FrontLeft, -1, 1);
        BackLeft = Range.clip(BackLeft, -1, 1);
        BackRight = Range.clip(BackRight, -1, 1);



        Two.setPower(FrontRight / 2);
        Ten.setPower(FrontLeft / 2);
        Eight.setPower(BackLeft / 2);
        Four.setPower(BackRight / 2);

        if(gamepad1.a){
            BallRelease.setPosition(0);
        }
        else {
            BallRelease.setPosition(0.5);
        }

        if(gamepad2.a){
            ArmRelease.setPosition(0.4);
        }
        else {
            ArmRelease.setPosition(0);
        }

        if(gamepad2.x){
            Sweeper.setPower(-1.0);
        }
        else if (gamepad2.b){
            Sweeper.setPower(1.0);
        }
        else {
            Sweeper.setPower(0.0);
        }

        if (gamepad2.y){
            ColorBall.setPower(-1.0);
        }
        else {
            ColorBall.setPower(0.0);
        }

        if (gamepad2.right_bumper){
            RackPinion.setPosition(1.0);
        }
        else if (gamepad2.left_bumper){
            RackPinion.setPosition(0.0);
        }
        else{
            RackPinion.setPosition(0.5);
        }

        if (gamepad2.right_trigger > 0.3) {
            Lift.setPower(-1);
        }
        else if (gamepad2.left_trigger > 0.3) {
            Lift.setPower(1);
        }
        else {
            Lift.setPower(0);
        }

        if (gamepad2.dpad_up){
            Clamp.setPosition(1.0);
            
        }
        else if (gamepad2.dpad_down){
            Clamp.setPosition(0.0);
            ClampStay = 0.0;
        }
        else if (gamepad2.dpad_right){
            Clamp.setPosition(0.7);
            ClampStay = 0.7;
        }
        else{
            Clamp.setPosition(ClampStay);
        }

    }

    @Override
    public void stop() {

    }



}
